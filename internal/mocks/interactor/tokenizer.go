// Code generated by MockGen. DO NOT EDIT.
// Source: ir-project/contracts (interfaces: Tokenizer)

// Package interactor_mock is a generated GoMock package.
package interactor_mock

import (
	entity "ir-project/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenizer is a mock of Tokenizer interface.
type MockTokenizer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenizerMockRecorder
}

// MockTokenizerMockRecorder is the mock recorder for MockTokenizer.
type MockTokenizerMockRecorder struct {
	mock *MockTokenizer
}

// NewMockTokenizer creates a new mock instance.
func NewMockTokenizer(ctrl *gomock.Controller) *MockTokenizer {
	mock := &MockTokenizer{ctrl: ctrl}
	mock.recorder = &MockTokenizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenizer) EXPECT() *MockTokenizerMockRecorder {
	return m.recorder
}

// AddDocument mocks base method.
func (m *MockTokenizer) AddDocument(arg0 entity.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocument", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDocument indicates an expected call of AddDocument.
func (mr *MockTokenizerMockRecorder) AddDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocument", reflect.TypeOf((*MockTokenizer)(nil).AddDocument), arg0)
}

// AssignSkipPointer mocks base method.
func (m *MockTokenizer) AssignSkipPointer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignSkipPointer")
}

// AssignSkipPointer indicates an expected call of AssignSkipPointer.
func (mr *MockTokenizerMockRecorder) AssignSkipPointer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignSkipPointer", reflect.TypeOf((*MockTokenizer)(nil).AssignSkipPointer))
}

// FindToken mocks base method.
func (m *MockTokenizer) FindToken(arg0 string) *entity.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindToken", arg0)
	ret0, _ := ret[0].(*entity.Token)
	return ret0
}

// FindToken indicates an expected call of FindToken.
func (mr *MockTokenizerMockRecorder) FindToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindToken", reflect.TypeOf((*MockTokenizer)(nil).FindToken), arg0)
}
